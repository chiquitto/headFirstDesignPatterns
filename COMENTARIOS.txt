* Padrão Strategy
O Padrão Strategy define uma famĩlia de algoritmos, encapsula cada um deles e os torna intercambiáveis. A estratégia deixa o algoritmo variar independentemente dos clientes que o utilizam.

* Padrão Observer
O Padrão Observer define uma dependencia um-para-muitos entre objetos para que quando um objeto mude de estado todos os seus dependentes sejam avisados e atualizados automaticamente.

* Padrão Decorator
O Padrão Decorator anexa responsabilidades adicionais a um objeto dinamicamente. Os decoradores fornecem uma alternativa flexível de subclasse para estender a funcionalidade.

* Padrão Factory Method
Padrão Factory Method define uma interface para criar um objeto, mas permite às classes decidir qual classe instanciar. O Factory Method permite a uma classe definir a instanciação para subclasses.

* Padrão Abstract Factory
O Padrão Abstract Factory fornece uma interface para criar famílias de objetos relacionados ou dependentes sem especificar suas classes concretas.

==

* StrategyGameWeapon
Implementa o Design Pattern Strategy

* WeatherStation
Implementa Design Pattern Observer

* WeatherStation2
Também implementa o Design Pattern Observer, mas desta vez usamos Java.Util.Observable e Java.Util.Observer

* StarbuzzCoffe
Implementa o Design Pattern Decorator

* Pizzaria
Implementa o Design Pattern Factory

* PizzariaV2
Implementa o Design Pattern Abstract Factory
