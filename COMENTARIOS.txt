* Padrão Strategy
O Padrão Strategy define uma famĩlia de algoritmos, encapsula cada um deles e os torna intercambiáveis. A estratégia deixa o algoritmo variar independentemente dos clientes que o utilizam.

* Padrão Observer
O Padrão Observer define uma dependencia um-para-muitos entre objetos para que quando um objeto mude de estado todos os seus dependentes sejam avisados e atualizados automaticamente.

* Padrão Decorator
O Padrão Decorator anexa responsabilidades adicionais a um objeto dinamicamente. Os decoradores fornecem uma alternativa flexível de subclasse para estender a funcionalidade.

* Padrão Factory Method
Padrão Factory Method define uma interface para criar um objeto, mas permite às classes decidir qual classe instanciar. O Factory Method permite a uma classe definir a instanciação para subclasses.

* Padrão Abstract Factory
O Padrão Abstract Factory fornece uma interface para criar famílias de objetos relacionados ou dependentes sem especificar suas classes concretas.

* Padrão Singleton
O Padrão Singleton garante que uma classe tenha apenas uma instancia e fornece um ponto global de acesso a ela.

* Padrão Command
O Padrão Command encapsula uma solicitação como um objeto, o que lhe permite parametrizar outros objetos com diferentes solicitações, enfileirar ou registrar solicitações e implementar recursos de cancelamento de operações.

* Padrão Adapter
O Padrão Adapter converte a interface de uma classe para outra interface que o cliente espera encontrar. O Adaptador permite que classes com interfaces incompatíveis trabalhem juntas.

* Padrão Facade
O Padrão Facade (Fachada) fornece uma interface unificada para um conjunto de interfaces de um subsistema. A fachada define uma interface de nível mais alto que facilita a utilização do subsistema.

* Padrão Template Method
O Padrão Template Method define um esqueleto de um algoritmo dentro de um método, transferindo alguns de seus passos para as subclasses. O Template method permite que as subclasses redefinam certos passos de um algoritmo sem alterar a estrutura do próprio algoritmo.

==

* StrategyGameWeapon
Implementa o Design Pattern Strategy

* WeatherStation
Implementa Design Pattern Observer

* WeatherStation2
Também implementa o Design Pattern Observer, mas desta vez usamos Java.Util.Observable e Java.Util.Observer

* StarbuzzCoffe
Implementa o Design Pattern Decorator

* Pizzaria
Implementa o Design Pattern Factory

* PizzariaV2
Implementa o Design Pattern Abstract Factory

* ControleRemoto
Implementa o Design Pattern Command

* ControleRemoto2
Implementa o Design Pattern Command

* Adapter1
Implementa o Design Pattern Adapter Object

* HomeTheater
Implementa o Design Pattern Facade

* CaffeineBeverageTemplate
Implementa o Design Pattern Template Method
